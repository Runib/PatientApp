//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace PatientApp.localhost1 {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="MyWebService_Binding", Namespace="http://SoftIDTx/Services/")]
    public partial class WebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback LoadAllPatientDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadPatientDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreatePatientDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatePatientDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeletePatientDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadAllOrderDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadOrderDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadAllTestDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadTestDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateTestDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteTestDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateOrderDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback EqualsPatientOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadPatientDataByOrderOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteOrderDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback ClearAllTestOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateSelectedTestsOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadAllTitleOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadTitleOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadTitleIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback NextIdOrderOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadOrderDataByOrderNumberOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WebService() {
            this.Url = global::PatientApp.Properties.Settings.Default.PatientApp_localhost1_WebService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event LoadAllPatientDataCompletedEventHandler LoadAllPatientDataCompleted;
        
        /// <remarks/>
        public event LoadPatientDataCompletedEventHandler LoadPatientDataCompleted;
        
        /// <remarks/>
        public event CreatePatientDataCompletedEventHandler CreatePatientDataCompleted;
        
        /// <remarks/>
        public event UpdatePatientDataCompletedEventHandler UpdatePatientDataCompleted;
        
        /// <remarks/>
        public event DeletePatientDataCompletedEventHandler DeletePatientDataCompleted;
        
        /// <remarks/>
        public event LoadAllOrderDataCompletedEventHandler LoadAllOrderDataCompleted;
        
        /// <remarks/>
        public event LoadOrderDataCompletedEventHandler LoadOrderDataCompleted;
        
        /// <remarks/>
        public event LoadAllTestDataCompletedEventHandler LoadAllTestDataCompleted;
        
        /// <remarks/>
        public event LoadTestDataCompletedEventHandler LoadTestDataCompleted;
        
        /// <remarks/>
        public event CreateTestDataCompletedEventHandler CreateTestDataCompleted;
        
        /// <remarks/>
        public event DeleteTestDataCompletedEventHandler DeleteTestDataCompleted;
        
        /// <remarks/>
        public event CreateOrderDataCompletedEventHandler CreateOrderDataCompleted;
        
        /// <remarks/>
        public event EqualsPatientCompletedEventHandler EqualsPatientCompleted;
        
        /// <remarks/>
        public event LoadPatientDataByOrderCompletedEventHandler LoadPatientDataByOrderCompleted;
        
        /// <remarks/>
        public event DeleteOrderDataCompletedEventHandler DeleteOrderDataCompleted;
        
        /// <remarks/>
        public event ClearAllTestCompletedEventHandler ClearAllTestCompleted;
        
        /// <remarks/>
        public event UpdateSelectedTestsCompletedEventHandler UpdateSelectedTestsCompleted;
        
        /// <remarks/>
        public event LoadAllTitleCompletedEventHandler LoadAllTitleCompleted;
        
        /// <remarks/>
        public event LoadTitleCompletedEventHandler LoadTitleCompleted;
        
        /// <remarks/>
        public event LoadTitleIdCompletedEventHandler LoadTitleIdCompleted;
        
        /// <remarks/>
        public event NextIdOrderCompletedEventHandler NextIdOrderCompleted;
        
        /// <remarks/>
        public event LoadOrderDataByOrderNumberCompletedEventHandler LoadOrderDataByOrderNumberCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestElementName="ReadAllPatient", RequestNamespace="http://SoftIDTx/Services/", ResponseElementName="ReadAllPatientResponse", ResponseNamespace="http://SoftIDTx/Services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("AllPatientResponse")]
        public Patient[] LoadAllPatientData() {
            object[] results = this.Invoke("LoadAllPatientData", new object[0]);
            return ((Patient[])(results[0]));
        }
        
        /// <remarks/>
        public void LoadAllPatientDataAsync() {
            this.LoadAllPatientDataAsync(null);
        }
        
        /// <remarks/>
        public void LoadAllPatientDataAsync(object userState) {
            if ((this.LoadAllPatientDataOperationCompleted == null)) {
                this.LoadAllPatientDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadAllPatientDataOperationCompleted);
            }
            this.InvokeAsync("LoadAllPatientData", new object[0], this.LoadAllPatientDataOperationCompleted, userState);
        }
        
        private void OnLoadAllPatientDataOperationCompleted(object arg) {
            if ((this.LoadAllPatientDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadAllPatientDataCompleted(this, new LoadAllPatientDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestElementName="ReadPatientDataByMrn", RequestNamespace="http://SoftIDTx/Services/", ResponseElementName="ReadPatientDataByMrnResponse", ResponseNamespace="http://SoftIDTx/Services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("PatientData")]
        public Patient LoadPatientData(string PatientMrn) {
            object[] results = this.Invoke("LoadPatientData", new object[] {
                        PatientMrn});
            return ((Patient)(results[0]));
        }
        
        /// <remarks/>
        public void LoadPatientDataAsync(string PatientMrn) {
            this.LoadPatientDataAsync(PatientMrn, null);
        }
        
        /// <remarks/>
        public void LoadPatientDataAsync(string PatientMrn, object userState) {
            if ((this.LoadPatientDataOperationCompleted == null)) {
                this.LoadPatientDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadPatientDataOperationCompleted);
            }
            this.InvokeAsync("LoadPatientData", new object[] {
                        PatientMrn}, this.LoadPatientDataOperationCompleted, userState);
        }
        
        private void OnLoadPatientDataOperationCompleted(object arg) {
            if ((this.LoadPatientDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadPatientDataCompleted(this, new LoadPatientDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestElementName="CreatePatient", RequestNamespace="http://SoftIDTx/Services/", ResponseElementName="CreatePatientResponse", ResponseNamespace="http://SoftIDTx/Services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("outCreatePatient")]
        public bool CreatePatientData(Patient Patient) {
            object[] results = this.Invoke("CreatePatientData", new object[] {
                        Patient});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CreatePatientDataAsync(Patient Patient) {
            this.CreatePatientDataAsync(Patient, null);
        }
        
        /// <remarks/>
        public void CreatePatientDataAsync(Patient Patient, object userState) {
            if ((this.CreatePatientDataOperationCompleted == null)) {
                this.CreatePatientDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreatePatientDataOperationCompleted);
            }
            this.InvokeAsync("CreatePatientData", new object[] {
                        Patient}, this.CreatePatientDataOperationCompleted, userState);
        }
        
        private void OnCreatePatientDataOperationCompleted(object arg) {
            if ((this.CreatePatientDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreatePatientDataCompleted(this, new CreatePatientDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestElementName="UpdatePatient", RequestNamespace="http://SoftIDTx/Services/", ResponseElementName="UpdatePatientResponse", ResponseNamespace="http://SoftIDTx/Services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("outUpdatePatient")]
        public bool UpdatePatientData(string MRN, string FirstName, string SecondName, System.DateTime DOB, [System.Xml.Serialization.XmlIgnoreAttribute()] bool DOBSpecified, string Sex, string Email) {
            object[] results = this.Invoke("UpdatePatientData", new object[] {
                        MRN,
                        FirstName,
                        SecondName,
                        DOB,
                        DOBSpecified,
                        Sex,
                        Email});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdatePatientDataAsync(string MRN, string FirstName, string SecondName, System.DateTime DOB, bool DOBSpecified, string Sex, string Email) {
            this.UpdatePatientDataAsync(MRN, FirstName, SecondName, DOB, DOBSpecified, Sex, Email, null);
        }
        
        /// <remarks/>
        public void UpdatePatientDataAsync(string MRN, string FirstName, string SecondName, System.DateTime DOB, bool DOBSpecified, string Sex, string Email, object userState) {
            if ((this.UpdatePatientDataOperationCompleted == null)) {
                this.UpdatePatientDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePatientDataOperationCompleted);
            }
            this.InvokeAsync("UpdatePatientData", new object[] {
                        MRN,
                        FirstName,
                        SecondName,
                        DOB,
                        DOBSpecified,
                        Sex,
                        Email}, this.UpdatePatientDataOperationCompleted, userState);
        }
        
        private void OnUpdatePatientDataOperationCompleted(object arg) {
            if ((this.UpdatePatientDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePatientDataCompleted(this, new UpdatePatientDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestElementName="DeletePatient", RequestNamespace="http://SoftIDTx/Services/", ResponseElementName="DeletePatientResponse", ResponseNamespace="http://SoftIDTx/Services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("outDeletePatient")]
        public bool DeletePatientData(string MRN) {
            object[] results = this.Invoke("DeletePatientData", new object[] {
                        MRN});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeletePatientDataAsync(string MRN) {
            this.DeletePatientDataAsync(MRN, null);
        }
        
        /// <remarks/>
        public void DeletePatientDataAsync(string MRN, object userState) {
            if ((this.DeletePatientDataOperationCompleted == null)) {
                this.DeletePatientDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeletePatientDataOperationCompleted);
            }
            this.InvokeAsync("DeletePatientData", new object[] {
                        MRN}, this.DeletePatientDataOperationCompleted, userState);
        }
        
        private void OnDeletePatientDataOperationCompleted(object arg) {
            if ((this.DeletePatientDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeletePatientDataCompleted(this, new DeletePatientDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestElementName="ReadAllOrder", RequestNamespace="http://SoftIDTx/Services/", ResponseElementName="ReadAllOrderResponse", ResponseNamespace="http://SoftIDTx/Services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("OrderData")]
        public Order[] LoadAllOrderData() {
            object[] results = this.Invoke("LoadAllOrderData", new object[0]);
            return ((Order[])(results[0]));
        }
        
        /// <remarks/>
        public void LoadAllOrderDataAsync() {
            this.LoadAllOrderDataAsync(null);
        }
        
        /// <remarks/>
        public void LoadAllOrderDataAsync(object userState) {
            if ((this.LoadAllOrderDataOperationCompleted == null)) {
                this.LoadAllOrderDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadAllOrderDataOperationCompleted);
            }
            this.InvokeAsync("LoadAllOrderData", new object[0], this.LoadAllOrderDataOperationCompleted, userState);
        }
        
        private void OnLoadAllOrderDataOperationCompleted(object arg) {
            if ((this.LoadAllOrderDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadAllOrderDataCompleted(this, new LoadAllOrderDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestElementName="ReadOrder", RequestNamespace="http://SoftIDTx/Services/", ResponseElementName="ReadOrderResponse", ResponseNamespace="http://SoftIDTx/Services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("OrderData")]
        public Order[] LoadOrderData(string PatientMrn) {
            object[] results = this.Invoke("LoadOrderData", new object[] {
                        PatientMrn});
            return ((Order[])(results[0]));
        }
        
        /// <remarks/>
        public void LoadOrderDataAsync(string PatientMrn) {
            this.LoadOrderDataAsync(PatientMrn, null);
        }
        
        /// <remarks/>
        public void LoadOrderDataAsync(string PatientMrn, object userState) {
            if ((this.LoadOrderDataOperationCompleted == null)) {
                this.LoadOrderDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadOrderDataOperationCompleted);
            }
            this.InvokeAsync("LoadOrderData", new object[] {
                        PatientMrn}, this.LoadOrderDataOperationCompleted, userState);
        }
        
        private void OnLoadOrderDataOperationCompleted(object arg) {
            if ((this.LoadOrderDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadOrderDataCompleted(this, new LoadOrderDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestElementName="ReadAllTest", RequestNamespace="http://SoftIDTx/Services/", ResponseElementName="ReadAllTestResponse", ResponseNamespace="http://SoftIDTx/Services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Test")]
        public Test[] LoadAllTestData() {
            object[] results = this.Invoke("LoadAllTestData", new object[0]);
            return ((Test[])(results[0]));
        }
        
        /// <remarks/>
        public void LoadAllTestDataAsync() {
            this.LoadAllTestDataAsync(null);
        }
        
        /// <remarks/>
        public void LoadAllTestDataAsync(object userState) {
            if ((this.LoadAllTestDataOperationCompleted == null)) {
                this.LoadAllTestDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadAllTestDataOperationCompleted);
            }
            this.InvokeAsync("LoadAllTestData", new object[0], this.LoadAllTestDataOperationCompleted, userState);
        }
        
        private void OnLoadAllTestDataOperationCompleted(object arg) {
            if ((this.LoadAllTestDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadAllTestDataCompleted(this, new LoadAllTestDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestElementName="ReadTest", RequestNamespace="http://SoftIDTx/Services/", ResponseElementName="ReadTestResponse", ResponseNamespace="http://SoftIDTx/Services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("TestData")]
        public Test[] LoadTestData(int OrderNumber) {
            object[] results = this.Invoke("LoadTestData", new object[] {
                        OrderNumber});
            return ((Test[])(results[0]));
        }
        
        /// <remarks/>
        public void LoadTestDataAsync(int OrderNumber) {
            this.LoadTestDataAsync(OrderNumber, null);
        }
        
        /// <remarks/>
        public void LoadTestDataAsync(int OrderNumber, object userState) {
            if ((this.LoadTestDataOperationCompleted == null)) {
                this.LoadTestDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadTestDataOperationCompleted);
            }
            this.InvokeAsync("LoadTestData", new object[] {
                        OrderNumber}, this.LoadTestDataOperationCompleted, userState);
        }
        
        private void OnLoadTestDataOperationCompleted(object arg) {
            if ((this.LoadTestDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadTestDataCompleted(this, new LoadTestDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestElementName="CreateTest", RequestNamespace="http://SoftIDTx/Services/", ResponseElementName="CreateTestResponse", ResponseNamespace="http://SoftIDTx/Services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("outCreateTest")]
        public bool CreateTestData(Test Test) {
            object[] results = this.Invoke("CreateTestData", new object[] {
                        Test});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CreateTestDataAsync(Test Test) {
            this.CreateTestDataAsync(Test, null);
        }
        
        /// <remarks/>
        public void CreateTestDataAsync(Test Test, object userState) {
            if ((this.CreateTestDataOperationCompleted == null)) {
                this.CreateTestDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateTestDataOperationCompleted);
            }
            this.InvokeAsync("CreateTestData", new object[] {
                        Test}, this.CreateTestDataOperationCompleted, userState);
        }
        
        private void OnCreateTestDataOperationCompleted(object arg) {
            if ((this.CreateTestDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateTestDataCompleted(this, new CreateTestDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestElementName="DeleteTest", RequestNamespace="http://SoftIDTx/Services/", ResponseElementName="DeleteTestResponse", ResponseNamespace="http://SoftIDTx/Services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("outDeleteTest")]
        public bool DeleteTestData(int TestId) {
            object[] results = this.Invoke("DeleteTestData", new object[] {
                        TestId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteTestDataAsync(int TestId) {
            this.DeleteTestDataAsync(TestId, null);
        }
        
        /// <remarks/>
        public void DeleteTestDataAsync(int TestId, object userState) {
            if ((this.DeleteTestDataOperationCompleted == null)) {
                this.DeleteTestDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteTestDataOperationCompleted);
            }
            this.InvokeAsync("DeleteTestData", new object[] {
                        TestId}, this.DeleteTestDataOperationCompleted, userState);
        }
        
        private void OnDeleteTestDataOperationCompleted(object arg) {
            if ((this.DeleteTestDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteTestDataCompleted(this, new DeleteTestDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestElementName="CreateOrder", RequestNamespace="http://SoftIDTx/Services/", ResponseElementName="CreateOrderResponse", ResponseNamespace="http://SoftIDTx/Services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("outCreateOrder")]
        public bool CreateOrderData(Order Order, string PatientMrn) {
            object[] results = this.Invoke("CreateOrderData", new object[] {
                        Order,
                        PatientMrn});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CreateOrderDataAsync(Order Order, string PatientMrn) {
            this.CreateOrderDataAsync(Order, PatientMrn, null);
        }
        
        /// <remarks/>
        public void CreateOrderDataAsync(Order Order, string PatientMrn, object userState) {
            if ((this.CreateOrderDataOperationCompleted == null)) {
                this.CreateOrderDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateOrderDataOperationCompleted);
            }
            this.InvokeAsync("CreateOrderData", new object[] {
                        Order,
                        PatientMrn}, this.CreateOrderDataOperationCompleted, userState);
        }
        
        private void OnCreateOrderDataOperationCompleted(object arg) {
            if ((this.CreateOrderDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateOrderDataCompleted(this, new CreateOrderDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestElementName="CheckPatient", RequestNamespace="http://SoftIDTx/Services/", ResponseElementName="CheckPatientResponse", ResponseNamespace="http://SoftIDTx/Services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("outCheckPatient")]
        public bool EqualsPatient(Patient Patient) {
            object[] results = this.Invoke("EqualsPatient", new object[] {
                        Patient});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void EqualsPatientAsync(Patient Patient) {
            this.EqualsPatientAsync(Patient, null);
        }
        
        /// <remarks/>
        public void EqualsPatientAsync(Patient Patient, object userState) {
            if ((this.EqualsPatientOperationCompleted == null)) {
                this.EqualsPatientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEqualsPatientOperationCompleted);
            }
            this.InvokeAsync("EqualsPatient", new object[] {
                        Patient}, this.EqualsPatientOperationCompleted, userState);
        }
        
        private void OnEqualsPatientOperationCompleted(object arg) {
            if ((this.EqualsPatientCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EqualsPatientCompleted(this, new EqualsPatientCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestElementName="ReadPatientDataByOrder", RequestNamespace="http://SoftIDTx/Services/", ResponseElementName="ReadPatientDataByOrderResponse", ResponseNamespace="http://SoftIDTx/Services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("PatientData")]
        public Patient LoadPatientDataByOrder(Order OrderData) {
            object[] results = this.Invoke("LoadPatientDataByOrder", new object[] {
                        OrderData});
            return ((Patient)(results[0]));
        }
        
        /// <remarks/>
        public void LoadPatientDataByOrderAsync(Order OrderData) {
            this.LoadPatientDataByOrderAsync(OrderData, null);
        }
        
        /// <remarks/>
        public void LoadPatientDataByOrderAsync(Order OrderData, object userState) {
            if ((this.LoadPatientDataByOrderOperationCompleted == null)) {
                this.LoadPatientDataByOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadPatientDataByOrderOperationCompleted);
            }
            this.InvokeAsync("LoadPatientDataByOrder", new object[] {
                        OrderData}, this.LoadPatientDataByOrderOperationCompleted, userState);
        }
        
        private void OnLoadPatientDataByOrderOperationCompleted(object arg) {
            if ((this.LoadPatientDataByOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadPatientDataByOrderCompleted(this, new LoadPatientDataByOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestElementName="DeleteOrder", RequestNamespace="http://SoftIDTx/Services/", ResponseElementName="DeleteOrderResponse", ResponseNamespace="http://SoftIDTx/Services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("outDeleteOrder")]
        public bool DeleteOrderData(Order Order) {
            object[] results = this.Invoke("DeleteOrderData", new object[] {
                        Order});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteOrderDataAsync(Order Order) {
            this.DeleteOrderDataAsync(Order, null);
        }
        
        /// <remarks/>
        public void DeleteOrderDataAsync(Order Order, object userState) {
            if ((this.DeleteOrderDataOperationCompleted == null)) {
                this.DeleteOrderDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteOrderDataOperationCompleted);
            }
            this.InvokeAsync("DeleteOrderData", new object[] {
                        Order}, this.DeleteOrderDataOperationCompleted, userState);
        }
        
        private void OnDeleteOrderDataOperationCompleted(object arg) {
            if ((this.DeleteOrderDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteOrderDataCompleted(this, new DeleteOrderDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestElementName="ClearTest", RequestNamespace="http://SoftIDTx/Services/", ResponseElementName="ClearTestResponse", ResponseNamespace="http://SoftIDTx/Services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("outClearTest")]
        public bool ClearAllTest() {
            object[] results = this.Invoke("ClearAllTest", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ClearAllTestAsync() {
            this.ClearAllTestAsync(null);
        }
        
        /// <remarks/>
        public void ClearAllTestAsync(object userState) {
            if ((this.ClearAllTestOperationCompleted == null)) {
                this.ClearAllTestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnClearAllTestOperationCompleted);
            }
            this.InvokeAsync("ClearAllTest", new object[0], this.ClearAllTestOperationCompleted, userState);
        }
        
        private void OnClearAllTestOperationCompleted(object arg) {
            if ((this.ClearAllTestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ClearAllTestCompleted(this, new ClearAllTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestElementName="UpdateAllTest", RequestNamespace="http://SoftIDTx/Services/", ResponseElementName="UpdateAllTestResponse", ResponseNamespace="http://SoftIDTx/Services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("outUpdateTest")]
        public bool UpdateSelectedTests([System.Xml.Serialization.XmlElementAttribute("TestList")] Test[] TestList) {
            object[] results = this.Invoke("UpdateSelectedTests", new object[] {
                        TestList});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateSelectedTestsAsync(Test[] TestList) {
            this.UpdateSelectedTestsAsync(TestList, null);
        }
        
        /// <remarks/>
        public void UpdateSelectedTestsAsync(Test[] TestList, object userState) {
            if ((this.UpdateSelectedTestsOperationCompleted == null)) {
                this.UpdateSelectedTestsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSelectedTestsOperationCompleted);
            }
            this.InvokeAsync("UpdateSelectedTests", new object[] {
                        TestList}, this.UpdateSelectedTestsOperationCompleted, userState);
        }
        
        private void OnUpdateSelectedTestsOperationCompleted(object arg) {
            if ((this.UpdateSelectedTestsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateSelectedTestsCompleted(this, new UpdateSelectedTestsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestElementName="ReadAllTitle", RequestNamespace="http://SoftIDTx/Services/", ResponseElementName="ReadAllTitleResponse", ResponseNamespace="http://SoftIDTx/Services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("AllTitle")]
        public Title[] LoadAllTitle() {
            object[] results = this.Invoke("LoadAllTitle", new object[0]);
            return ((Title[])(results[0]));
        }
        
        /// <remarks/>
        public void LoadAllTitleAsync() {
            this.LoadAllTitleAsync(null);
        }
        
        /// <remarks/>
        public void LoadAllTitleAsync(object userState) {
            if ((this.LoadAllTitleOperationCompleted == null)) {
                this.LoadAllTitleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadAllTitleOperationCompleted);
            }
            this.InvokeAsync("LoadAllTitle", new object[0], this.LoadAllTitleOperationCompleted, userState);
        }
        
        private void OnLoadAllTitleOperationCompleted(object arg) {
            if ((this.LoadAllTitleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadAllTitleCompleted(this, new LoadAllTitleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestElementName="GetTitle", RequestNamespace="http://SoftIDTx/Services/", ResponseElementName="GetTitleResponse", ResponseNamespace="http://SoftIDTx/Services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Title")]
        public string LoadTitle(int TitleId) {
            object[] results = this.Invoke("LoadTitle", new object[] {
                        TitleId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LoadTitleAsync(int TitleId) {
            this.LoadTitleAsync(TitleId, null);
        }
        
        /// <remarks/>
        public void LoadTitleAsync(int TitleId, object userState) {
            if ((this.LoadTitleOperationCompleted == null)) {
                this.LoadTitleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadTitleOperationCompleted);
            }
            this.InvokeAsync("LoadTitle", new object[] {
                        TitleId}, this.LoadTitleOperationCompleted, userState);
        }
        
        private void OnLoadTitleOperationCompleted(object arg) {
            if ((this.LoadTitleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadTitleCompleted(this, new LoadTitleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestElementName="GetTitleId", RequestNamespace="http://SoftIDTx/Services/", ResponseElementName="GetTitleIdResponse", ResponseNamespace="http://SoftIDTx/Services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("TitleId")]
        public int LoadTitleId(string Title) {
            object[] results = this.Invoke("LoadTitleId", new object[] {
                        Title});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void LoadTitleIdAsync(string Title) {
            this.LoadTitleIdAsync(Title, null);
        }
        
        /// <remarks/>
        public void LoadTitleIdAsync(string Title, object userState) {
            if ((this.LoadTitleIdOperationCompleted == null)) {
                this.LoadTitleIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadTitleIdOperationCompleted);
            }
            this.InvokeAsync("LoadTitleId", new object[] {
                        Title}, this.LoadTitleIdOperationCompleted, userState);
        }
        
        private void OnLoadTitleIdOperationCompleted(object arg) {
            if ((this.LoadTitleIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadTitleIdCompleted(this, new LoadTitleIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestElementName="GetLastIndex", RequestNamespace="http://SoftIDTx/Services/", ResponseElementName="GetLastIndexResponse", ResponseNamespace="http://SoftIDTx/Services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("LastIndex")]
        public int NextIdOrder() {
            object[] results = this.Invoke("NextIdOrder", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void NextIdOrderAsync() {
            this.NextIdOrderAsync(null);
        }
        
        /// <remarks/>
        public void NextIdOrderAsync(object userState) {
            if ((this.NextIdOrderOperationCompleted == null)) {
                this.NextIdOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNextIdOrderOperationCompleted);
            }
            this.InvokeAsync("NextIdOrder", new object[0], this.NextIdOrderOperationCompleted, userState);
        }
        
        private void OnNextIdOrderOperationCompleted(object arg) {
            if ((this.NextIdOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NextIdOrderCompleted(this, new NextIdOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestElementName="ReadOrderByOrderNumber", RequestNamespace="http://SoftIDTx/Services/", ResponseElementName="ReadOrderByOrderNumberResponse", ResponseNamespace="http://SoftIDTx/Services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("OrderData")]
        public Order[] LoadOrderDataByOrderNumber(int OrderNumber) {
            object[] results = this.Invoke("LoadOrderDataByOrderNumber", new object[] {
                        OrderNumber});
            return ((Order[])(results[0]));
        }
        
        /// <remarks/>
        public void LoadOrderDataByOrderNumberAsync(int OrderNumber) {
            this.LoadOrderDataByOrderNumberAsync(OrderNumber, null);
        }
        
        /// <remarks/>
        public void LoadOrderDataByOrderNumberAsync(int OrderNumber, object userState) {
            if ((this.LoadOrderDataByOrderNumberOperationCompleted == null)) {
                this.LoadOrderDataByOrderNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadOrderDataByOrderNumberOperationCompleted);
            }
            this.InvokeAsync("LoadOrderDataByOrderNumber", new object[] {
                        OrderNumber}, this.LoadOrderDataByOrderNumberOperationCompleted, userState);
        }
        
        private void OnLoadOrderDataByOrderNumberOperationCompleted(object arg) {
            if ((this.LoadOrderDataByOrderNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadOrderDataByOrderNumberCompleted(this, new LoadOrderDataByOrderNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://SoftIDTx/Services/")]
    public partial class Patient {
        
        private string firstNameField;
        
        private string secondNameField;
        
        private string mRNField;
        
        private System.DateTime dOBField;
        
        private string sexField;
        
        private string emailField;
        
        /// <remarks/>
        public string FirstName {
            get {
                return this.firstNameField;
            }
            set {
                this.firstNameField = value;
            }
        }
        
        /// <remarks/>
        public string SecondName {
            get {
                return this.secondNameField;
            }
            set {
                this.secondNameField = value;
            }
        }
        
        /// <remarks/>
        public string MRN {
            get {
                return this.mRNField;
            }
            set {
                this.mRNField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime DOB {
            get {
                return this.dOBField;
            }
            set {
                this.dOBField = value;
            }
        }
        
        /// <remarks/>
        public string Sex {
            get {
                return this.sexField;
            }
            set {
                this.sexField = value;
            }
        }
        
        /// <remarks/>
        public string Email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://SoftIDTx/Services/")]
    public partial class Title {
        
        private int titleIdField;
        
        private string title1Field;
        
        /// <remarks/>
        public int TitleId {
            get {
                return this.titleIdField;
            }
            set {
                this.titleIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Title")]
        public string Title1 {
            get {
                return this.title1Field;
            }
            set {
                this.title1Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://SoftIDTx/Services/")]
    public partial class Test {
        
        private int titleIdField;
        
        private string typeField;
        
        private int testIdField;
        
        private string specimenCodeField;
        
        private int priorityField;
        
        private bool isSelectedField;
        
        private int orderNumberField;
        
        /// <remarks/>
        public int TitleId {
            get {
                return this.titleIdField;
            }
            set {
                this.titleIdField = value;
            }
        }
        
        /// <remarks/>
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public int TestId {
            get {
                return this.testIdField;
            }
            set {
                this.testIdField = value;
            }
        }
        
        /// <remarks/>
        public string SpecimenCode {
            get {
                return this.specimenCodeField;
            }
            set {
                this.specimenCodeField = value;
            }
        }
        
        /// <remarks/>
        public int Priority {
            get {
                return this.priorityField;
            }
            set {
                this.priorityField = value;
            }
        }
        
        /// <remarks/>
        public bool isSelected {
            get {
                return this.isSelectedField;
            }
            set {
                this.isSelectedField = value;
            }
        }
        
        /// <remarks/>
        public int OrderNumber {
            get {
                return this.orderNumberField;
            }
            set {
                this.orderNumberField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://SoftIDTx/Services/")]
    public partial class Order {
        
        private int orderNumberField;
        
        private System.DateTime startDateField;
        
        private System.DateTime endDateField;
        
        private string patientMRNField;
        
        /// <remarks/>
        public int OrderNumber {
            get {
                return this.orderNumberField;
            }
            set {
                this.orderNumberField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime StartDate {
            get {
                return this.startDateField;
            }
            set {
                this.startDateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime EndDate {
            get {
                return this.endDateField;
            }
            set {
                this.endDateField = value;
            }
        }
        
        /// <remarks/>
        public string patientMRN {
            get {
                return this.patientMRNField;
            }
            set {
                this.patientMRNField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void LoadAllPatientDataCompletedEventHandler(object sender, LoadAllPatientDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadAllPatientDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadAllPatientDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Patient[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Patient[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void LoadPatientDataCompletedEventHandler(object sender, LoadPatientDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadPatientDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadPatientDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Patient Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Patient)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void CreatePatientDataCompletedEventHandler(object sender, CreatePatientDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreatePatientDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreatePatientDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void UpdatePatientDataCompletedEventHandler(object sender, UpdatePatientDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdatePatientDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdatePatientDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void DeletePatientDataCompletedEventHandler(object sender, DeletePatientDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeletePatientDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeletePatientDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void LoadAllOrderDataCompletedEventHandler(object sender, LoadAllOrderDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadAllOrderDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadAllOrderDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Order[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Order[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void LoadOrderDataCompletedEventHandler(object sender, LoadOrderDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadOrderDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadOrderDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Order[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Order[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void LoadAllTestDataCompletedEventHandler(object sender, LoadAllTestDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadAllTestDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadAllTestDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Test[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Test[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void LoadTestDataCompletedEventHandler(object sender, LoadTestDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadTestDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadTestDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Test[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Test[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void CreateTestDataCompletedEventHandler(object sender, CreateTestDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateTestDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateTestDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void DeleteTestDataCompletedEventHandler(object sender, DeleteTestDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteTestDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteTestDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void CreateOrderDataCompletedEventHandler(object sender, CreateOrderDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateOrderDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateOrderDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void EqualsPatientCompletedEventHandler(object sender, EqualsPatientCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EqualsPatientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EqualsPatientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void LoadPatientDataByOrderCompletedEventHandler(object sender, LoadPatientDataByOrderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadPatientDataByOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadPatientDataByOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Patient Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Patient)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void DeleteOrderDataCompletedEventHandler(object sender, DeleteOrderDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteOrderDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteOrderDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void ClearAllTestCompletedEventHandler(object sender, ClearAllTestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ClearAllTestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ClearAllTestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void UpdateSelectedTestsCompletedEventHandler(object sender, UpdateSelectedTestsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateSelectedTestsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateSelectedTestsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void LoadAllTitleCompletedEventHandler(object sender, LoadAllTitleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadAllTitleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadAllTitleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Title[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Title[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void LoadTitleCompletedEventHandler(object sender, LoadTitleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadTitleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadTitleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void LoadTitleIdCompletedEventHandler(object sender, LoadTitleIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadTitleIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadTitleIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void NextIdOrderCompletedEventHandler(object sender, NextIdOrderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NextIdOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NextIdOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void LoadOrderDataByOrderNumberCompletedEventHandler(object sender, LoadOrderDataByOrderNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadOrderDataByOrderNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadOrderDataByOrderNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Order[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Order[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591