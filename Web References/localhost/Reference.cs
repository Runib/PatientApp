//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace PatientApp.localhost {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="MyWebService_Binding", Namespace="http://SoftIDTx/Services/")]
    public partial class MyWebService_Binding : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback LoadPatientDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback SavePatientDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadOrderDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveOrderDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadTestDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveTestDataOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public MyWebService_Binding() {
            this.Url = global::PatientApp.Properties.Settings.Default.PatientApp_localhost_WebService1;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event LoadPatientDataCompletedEventHandler LoadPatientDataCompleted;
        
        /// <remarks/>
        public event SavePatientDataCompletedEventHandler SavePatientDataCompleted;
        
        /// <remarks/>
        public event LoadOrderDataCompletedEventHandler LoadOrderDataCompleted;
        
        /// <remarks/>
        public event SaveOrderDataCompletedEventHandler SaveOrderDataCompleted;
        
        /// <remarks/>
        public event LoadTestDataCompletedEventHandler LoadTestDataCompleted;
        
        /// <remarks/>
        public event SaveTestDataCompletedEventHandler SaveTestDataCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestElementName="ReadPatientData", RequestNamespace="http://SoftIDTx/Services/", ResponseElementName="ReadPatientDataResponse", ResponseNamespace="http://SoftIDTx/Services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("patientData")]
        public Patient LoadPatientData(string mrnStr) {
            object[] results = this.Invoke("LoadPatientData", new object[] {
                        mrnStr});
            return ((Patient)(results[0]));
        }
        
        /// <remarks/>
        public void LoadPatientDataAsync(string mrnStr) {
            this.LoadPatientDataAsync(mrnStr, null);
        }
        
        /// <remarks/>
        public void LoadPatientDataAsync(string mrnStr, object userState) {
            if ((this.LoadPatientDataOperationCompleted == null)) {
                this.LoadPatientDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadPatientDataOperationCompleted);
            }
            this.InvokeAsync("LoadPatientData", new object[] {
                        mrnStr}, this.LoadPatientDataOperationCompleted, userState);
        }
        
        private void OnLoadPatientDataOperationCompleted(object arg) {
            if ((this.LoadPatientDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadPatientDataCompleted(this, new LoadPatientDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestElementName="SavePatient", RequestNamespace="http://SoftIDTx/Services/", ResponseElementName="SavePatientResponse", ResponseNamespace="http://SoftIDTx/Services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out")]
        public bool SavePatientData(Patient patientData) {
            object[] results = this.Invoke("SavePatientData", new object[] {
                        patientData});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SavePatientDataAsync(Patient patientData) {
            this.SavePatientDataAsync(patientData, null);
        }
        
        /// <remarks/>
        public void SavePatientDataAsync(Patient patientData, object userState) {
            if ((this.SavePatientDataOperationCompleted == null)) {
                this.SavePatientDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSavePatientDataOperationCompleted);
            }
            this.InvokeAsync("SavePatientData", new object[] {
                        patientData}, this.SavePatientDataOperationCompleted, userState);
        }
        
        private void OnSavePatientDataOperationCompleted(object arg) {
            if ((this.SavePatientDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SavePatientDataCompleted(this, new SavePatientDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestElementName="ReadOrderInfo", RequestNamespace="http://SoftIDTx/Services/", ResponseElementName="ReadOrderInfoResponse", ResponseNamespace="http://SoftIDTx/Services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("OrderInfo")]
        public Order LoadOrderData(string NumberStr) {
            object[] results = this.Invoke("LoadOrderData", new object[] {
                        NumberStr});
            return ((Order)(results[0]));
        }
        
        /// <remarks/>
        public void LoadOrderDataAsync(string NumberStr) {
            this.LoadOrderDataAsync(NumberStr, null);
        }
        
        /// <remarks/>
        public void LoadOrderDataAsync(string NumberStr, object userState) {
            if ((this.LoadOrderDataOperationCompleted == null)) {
                this.LoadOrderDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadOrderDataOperationCompleted);
            }
            this.InvokeAsync("LoadOrderData", new object[] {
                        NumberStr}, this.LoadOrderDataOperationCompleted, userState);
        }
        
        private void OnLoadOrderDataOperationCompleted(object arg) {
            if ((this.LoadOrderDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadOrderDataCompleted(this, new LoadOrderDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestElementName="SaveOrder", RequestNamespace="http://SoftIDTx/Services/", ResponseElementName="SaveOrderResponse", ResponseNamespace="http://SoftIDTx/Services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out")]
        public bool SaveOrderData(Order OrderInfo) {
            object[] results = this.Invoke("SaveOrderData", new object[] {
                        OrderInfo});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SaveOrderDataAsync(Order OrderInfo) {
            this.SaveOrderDataAsync(OrderInfo, null);
        }
        
        /// <remarks/>
        public void SaveOrderDataAsync(Order OrderInfo, object userState) {
            if ((this.SaveOrderDataOperationCompleted == null)) {
                this.SaveOrderDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveOrderDataOperationCompleted);
            }
            this.InvokeAsync("SaveOrderData", new object[] {
                        OrderInfo}, this.SaveOrderDataOperationCompleted, userState);
        }
        
        private void OnSaveOrderDataOperationCompleted(object arg) {
            if ((this.SaveOrderDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveOrderDataCompleted(this, new SaveOrderDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestElementName="ReadTestInfo", RequestNamespace="http://SoftIDTx/Services/", ResponseElementName="ReadTestInfoResponse", ResponseNamespace="http://SoftIDTx/Services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("TestInfo")]
        public Test LoadTestData(string NumberStr) {
            object[] results = this.Invoke("LoadTestData", new object[] {
                        NumberStr});
            return ((Test)(results[0]));
        }
        
        /// <remarks/>
        public void LoadTestDataAsync(string NumberStr) {
            this.LoadTestDataAsync(NumberStr, null);
        }
        
        /// <remarks/>
        public void LoadTestDataAsync(string NumberStr, object userState) {
            if ((this.LoadTestDataOperationCompleted == null)) {
                this.LoadTestDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadTestDataOperationCompleted);
            }
            this.InvokeAsync("LoadTestData", new object[] {
                        NumberStr}, this.LoadTestDataOperationCompleted, userState);
        }
        
        private void OnLoadTestDataOperationCompleted(object arg) {
            if ((this.LoadTestDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadTestDataCompleted(this, new LoadTestDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestElementName="SaveTest", RequestNamespace="http://SoftIDTx/Services/", ResponseElementName="SaveTestResponse", ResponseNamespace="http://SoftIDTx/Services/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out")]
        public bool SaveTestData(Test TestInfo) {
            object[] results = this.Invoke("SaveTestData", new object[] {
                        TestInfo});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SaveTestDataAsync(Test TestInfo) {
            this.SaveTestDataAsync(TestInfo, null);
        }
        
        /// <remarks/>
        public void SaveTestDataAsync(Test TestInfo, object userState) {
            if ((this.SaveTestDataOperationCompleted == null)) {
                this.SaveTestDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveTestDataOperationCompleted);
            }
            this.InvokeAsync("SaveTestData", new object[] {
                        TestInfo}, this.SaveTestDataOperationCompleted, userState);
        }
        
        private void OnSaveTestDataOperationCompleted(object arg) {
            if ((this.SaveTestDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveTestDataCompleted(this, new SaveTestDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WebService1Soap", Namespace="http://tempuri.org/")]
    public partial class WebService1Soap : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback HelloWorldOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WebService1Soap() {
            this.Url = global::PatientApp.Properties.Settings.Default.PatientApp_localhost_WebService1;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event HelloWorldCompletedEventHandler HelloWorldCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HelloWorld", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string HelloWorld() {
            object[] results = this.Invoke("HelloWorld", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void HelloWorldAsync() {
            this.HelloWorldAsync(null);
        }
        
        /// <remarks/>
        public void HelloWorldAsync(object userState) {
            if ((this.HelloWorldOperationCompleted == null)) {
                this.HelloWorldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHelloWorldOperationCompleted);
            }
            this.InvokeAsync("HelloWorld", new object[0], this.HelloWorldOperationCompleted, userState);
        }
        
        private void OnHelloWorldOperationCompleted(object arg) {
            if ((this.HelloWorldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HelloWorldCompleted(this, new HelloWorldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://SoftIDTx/Services/")]
    public partial class Patient {
        
        private string firstNameField;
        
        private string secondNameField;
        
        private string mRNField;
        
        private System.DateTime dOBField;
        
        private string sexField;
        
        private string emailField;
        
        private Order[] orderNumberField;
        
        /// <remarks/>
        public string FirstName {
            get {
                return this.firstNameField;
            }
            set {
                this.firstNameField = value;
            }
        }
        
        /// <remarks/>
        public string SecondName {
            get {
                return this.secondNameField;
            }
            set {
                this.secondNameField = value;
            }
        }
        
        /// <remarks/>
        public string MRN {
            get {
                return this.mRNField;
            }
            set {
                this.mRNField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime DOB {
            get {
                return this.dOBField;
            }
            set {
                this.dOBField = value;
            }
        }
        
        /// <remarks/>
        public string Sex {
            get {
                return this.sexField;
            }
            set {
                this.sexField = value;
            }
        }
        
        /// <remarks/>
        public string Email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("OrderNumber")]
        public Order[] OrderNumber {
            get {
                return this.orderNumberField;
            }
            set {
                this.orderNumberField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://SoftIDTx/Services/")]
    public partial class Order {
        
        private int orderNumberField;
        
        private System.DateTime startDateField;
        
        private System.DateTime endDateField;
        
        private Test[] testsField;
        
        /// <remarks/>
        public int OrderNumber {
            get {
                return this.orderNumberField;
            }
            set {
                this.orderNumberField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime StartDate {
            get {
                return this.startDateField;
            }
            set {
                this.startDateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime EndDate {
            get {
                return this.endDateField;
            }
            set {
                this.endDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Tests")]
        public Test[] Tests {
            get {
                return this.testsField;
            }
            set {
                this.testsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://SoftIDTx/Services/")]
    public partial class Test {
        
        private string typeField;
        
        private int testIdField;
        
        private string specimenCodeField;
        
        /// <remarks/>
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public int TestId {
            get {
                return this.testIdField;
            }
            set {
                this.testIdField = value;
            }
        }
        
        /// <remarks/>
        public string SpecimenCode {
            get {
                return this.specimenCodeField;
            }
            set {
                this.specimenCodeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void LoadPatientDataCompletedEventHandler(object sender, LoadPatientDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadPatientDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadPatientDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Patient Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Patient)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SavePatientDataCompletedEventHandler(object sender, SavePatientDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SavePatientDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SavePatientDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void LoadOrderDataCompletedEventHandler(object sender, LoadOrderDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadOrderDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadOrderDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Order Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Order)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SaveOrderDataCompletedEventHandler(object sender, SaveOrderDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveOrderDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveOrderDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void LoadTestDataCompletedEventHandler(object sender, LoadTestDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadTestDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadTestDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Test Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Test)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SaveTestDataCompletedEventHandler(object sender, SaveTestDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveTestDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveTestDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void HelloWorldCompletedEventHandler(object sender, HelloWorldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HelloWorldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HelloWorldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591